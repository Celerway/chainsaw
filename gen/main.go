// The following directive is necessary to make the package coherent:
//go:build ignore
// +build ignore

package main

import (
	"fmt"
	"github.com/celerway/chainsaw"
	"log"
	"os"
	"strings"
	"text/template"
	"time"
)

type LogFunction struct {
	Level string
}

type LogTemplate struct {
	Timestamp time.Time
	Functions []LogFunction
}

func main() {
	var err error
	f, err := os.Create("log.go")
	die(err)
	defer f.Close()
	myLevels := chainsaw.Levels[1:7]
	logFunctions := make([]LogFunction, 0)
	for _, level := range myLevels {
		lf := LogFunction{
			Level: strings.Title(level),
			Fatal: level == "fatal",
		}
		logFunctions = append(logFunctions, lf)
	}
	lt := LogTemplate{
		Timestamp: time.Now(),
		Functions: logFunctions,
	}
	err = packageTemplate.Execute(f, lt)
	if err != nil {
		fmt.Println(err)
	}
}
func die(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated by gen/main.go at {{ .Timestamp }}
package chainsaw

import (
	"fmt"
	"os"
)

{{- range .Functions }}
func (l *CircularLogger) {{.Level}}(v ...interface{}) {
	s := fmt.Sprint(v...)
	l.log({{.Level}}Level, s)
}

func (l *CircularLogger) {{.Level}}f(f string,v ...interface{}) {
	s := fmt.Sprintf(f, v...)
	l.log({{.Level}}Level, s)
}

func {{.Level}}(v ...interface{}) {
    l := defaultLogger
    l.{{.Level}}(v...)
}

func {{.Level}}f(f string,v ...interface{}) {
    l := defaultLogger
    l.{{.Level}}f(f,v...)
}

{{- end }}

`))
