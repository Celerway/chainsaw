// Code generated by go generate; DO NOT EDIT.
// This file was generated by gen/main.go at 2021-11-11 13:09:18.742834 +0100 CET m=+0.001039501
package chainsaw

import (
	"fmt"
	"strings"
)

func join(vals []interface{}) string {
	ss := make([]string, len(vals))
	for i, value := range vals {
		ss[i] = fmt.Sprint(value)
	}
	return strings.Join(ss, " ")
}
func (l *CircularLogger) Trace(v ...interface{}) {
	s := join(v)
	l.log(TraceLevel, s)
}

func (l *CircularLogger) Tracef(f string, v ...interface{}) {
	s := fmt.Sprintf(f, v...)
	l.log(TraceLevel, s)
}

func Trace(v ...interface{}) {
	l := defaultLogger
	l.Trace(v...)
}

func Tracef(f string, v ...interface{}) {
	l := defaultLogger
	l.Tracef(f, v...)
}
func (l *CircularLogger) Debug(v ...interface{}) {
	s := join(v)
	l.log(DebugLevel, s)
}

func (l *CircularLogger) Debugf(f string, v ...interface{}) {
	s := fmt.Sprintf(f, v...)
	l.log(DebugLevel, s)
}

func Debug(v ...interface{}) {
	l := defaultLogger
	l.Debug(v...)
}

func Debugf(f string, v ...interface{}) {
	l := defaultLogger
	l.Debugf(f, v...)
}
func (l *CircularLogger) Info(v ...interface{}) {
	s := join(v)
	l.log(InfoLevel, s)
}

func (l *CircularLogger) Infof(f string, v ...interface{}) {
	s := fmt.Sprintf(f, v...)
	l.log(InfoLevel, s)
}

func Info(v ...interface{}) {
	l := defaultLogger
	l.Info(v...)
}

func Infof(f string, v ...interface{}) {
	l := defaultLogger
	l.Infof(f, v...)
}
func (l *CircularLogger) Warn(v ...interface{}) {
	s := join(v)
	l.log(WarnLevel, s)
}

func (l *CircularLogger) Warnf(f string, v ...interface{}) {
	s := fmt.Sprintf(f, v...)
	l.log(WarnLevel, s)
}

func Warn(v ...interface{}) {
	l := defaultLogger
	l.Warn(v...)
}

func Warnf(f string, v ...interface{}) {
	l := defaultLogger
	l.Warnf(f, v...)
}
func (l *CircularLogger) Error(v ...interface{}) {
	s := join(v)
	l.log(ErrorLevel, s)
}

func (l *CircularLogger) Errorf(f string, v ...interface{}) {
	s := fmt.Sprintf(f, v...)
	l.log(ErrorLevel, s)
}

func Error(v ...interface{}) {
	l := defaultLogger
	l.Error(v...)
}

func Errorf(f string, v ...interface{}) {
	l := defaultLogger
	l.Errorf(f, v...)
}
func (l *CircularLogger) Fatal(v ...interface{}) {
	s := join(v)
	l.log(FatalLevel, s)
}

func (l *CircularLogger) Fatalf(f string, v ...interface{}) {
	s := fmt.Sprintf(f, v...)
	l.log(FatalLevel, s)
}

func Fatal(v ...interface{}) {
	l := defaultLogger
	l.Fatal(v...)
}

func Fatalf(f string, v ...interface{}) {
	l := defaultLogger
	l.Fatalf(f, v...)
}
